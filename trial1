import os
from google.colab import drive
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Mount Google Drive
drive.mount('/content/drive')

# Check if directory exists
yolo_dir = "/content/drive/My Drive/yolov3"
print("Directory exists:", os.path.exists(yolo_dir))

# List files in the directory
if os.path.exists(yolo_dir):
    files = os.listdir(yolo_dir)
    print("Files in directory:", files)
else:
    print("Directory does not exist.")

# Load labels from coco.names
with open('/content/drive/My Drive/yolov3/coco.names') as f:
    labels = [line.strip() for line in f]

# Load YOLOv3 network
net = cv2.dnn.readNet('/content/drive/My Drive/yolov3/yolov3.weights', '/content/drive/My Drive/yolov3/yolov3.cfg')

# Define the layers where output is needed
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]

# Function to process the video and save the output video
def process_video(video_path, output_path):
    cap = cv2.VideoCapture(video_path)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)

    # Define video writer to save the output
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Prepare the image for YOLOv3
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        outs = net.forward(output_layers)

        # Process detection
        class_ids = []
        confidences = []
        boxes = []
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5:
                    # Object detected
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)

                    # Rectangle coordinates
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)

        # Remove overlapping boxes
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

        # Draw boxes on the frame
        if len(indexes) > 0:
            for i in indexes.flatten():
                x, y, w, h = boxes[i]
                label = str(labels[class_ids[i]])
                confidence = confidences[i]
                color = (0, 255, 0) if label == 'person' else (0, 0, 255)
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, f"{label} {confidence:.2f}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        # Write the processed frame into the output video
        out.write(frame)

    # Release the video writer and capture objects
    cap.release()
    out.release()
    print(f"Video saved to {output_path}")

# Path to your video in Google Drive
video_path = '/content/drive/My Drive/video.mp4'

# Output video path
output_path = '/content/drive/My Drive/output.mp4'

# Process the video and save the output
process_video(video_path, output_path)

